import os
import re
import requests
import telebot
from telebot import types
from dotenv import load_dotenv
from g4f.client import Client

load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
TMDB_API_KEY = os.getenv("TMDB_API_KEY")

bot = telebot.TeleBot(TELEGRAM_TOKEN)
client = Client()
user_data = {}

def log_action(message):
    print(f"[LOG] User {message.chat.id}: {message.text}")

def ask_ai(prompt: str) -> str:
    try:
        response = client.chat.completions.create(
            messages=[{"role": "user", "content": prompt}],
            model="gpt-4o"
        )
        return response.choices[0].message.content
    except Exception as e:
        print(f"[AI ERROR] {str(e)}")
        return None

@bot.message_handler(commands=['start'])
def send_welcome(message):
    log_action(message)
    bot.reply_to(
        message,
        "üé¨ –ü—Ä–∏–≤—ñ—Ç! –û–ø–∏—à–∏, —è–∫–∏–π —Ñ—ñ–ª—å–º —Ö–æ—á–µ—à –ø–æ–¥–∏–≤–∏—Ç–∏—Å—å"
    )

@bot.message_handler(func=lambda message: True)
def handle_user_message(message):
    chat_id = message.chat.id
    text = message.text.strip()

    if chat_id in user_data and text in user_data[chat_id]:
        show_film_details(message)
        return

    try:
        log_action(message)
        bot.send_message(chat_id, "‚è≥ –ó–∞—á–µ–∫–∞–π—Ç–µ, –π–¥–µ –ø–æ—à—É–∫ —Ñ—ñ–ª—å–º—ñ–≤...")

        prompt = (
            f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —Ö–æ—á–µ –ø–æ–¥–∏–≤–∏—Ç–∏—Å—å —Ñ—ñ–ª—å–º –Ω–∞ –æ—Å–Ω–æ–≤—ñ –æ–ø–∏—Å—É: '{text}'. "
            f"–ù–∞–∑–≤–∏ 10 –ø—ñ–¥—Ö–æ–¥—è—â–∏—Ö —Ñ—ñ–ª—å–º—ñ–≤ —É —Ñ–æ—Ä–º–∞—Ç—ñ: 1) –ù–∞–∑–≤–∞ (—Ä—ñ–∫); 2) –ù–∞–∑–≤–∞ (—Ä—ñ–∫). "
            f"–¢—ñ–ª—å–∫–∏ —Å–ø–∏—Å–æ–∫, –±–µ–∑ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤."
        )

        gpt_response = ask_ai(prompt)

        if not gpt_response:
            bot.reply_to(message, "–ü—Ä–æ–±–ª–µ–º–∞ –∑ AI-—Å–µ—Ä–≤—ñ—Å–æ–º. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
            return

        films = [line.strip() for line in gpt_response.split('\n') if line.strip()][:10]

        if not films:
            bot.reply_to(message, "–ù–µ –∑–Ω–∞–π—à–æ–≤ —Ñ—ñ–ª—å–º—ñ–≤ –∑–∞ —Ç–∞–∫–∏–º –æ–ø–∏—Å–æ–º. –°–ø—Ä–æ–±—É–π —ñ–Ω–∞–∫—à–µ.")
            return

        user_data[chat_id] = films
        print(f"[BOT] –í–∏–±—Ä–∞–Ω—ñ —Ñ—ñ–ª—å–º–∏: {films}")

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
        for film in films:
            markup.add(types.KeyboardButton(film))

        bot.send_message(
            chat_id,
            "–û—Å—å —â–æ —è –∑–Ω–∞–π—à–æ–≤:\n" + "\n".join(films) + "\n\n–û–±–µ—Ä—ñ—Ç—å —Ñ—ñ–ª—å–º:",
            reply_markup=markup
        )

    except Exception as e:
        print(f"[ERROR] handle_user_message: {e}")
        bot.reply_to(message, f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: {str(e)}")

@bot.message_handler(func=lambda message: message.chat.id in user_data)
def show_film_details(message):
    try:
        log_action(message)
        selected_film = message.text
        films = user_data.get(message.chat.id, [])

        if selected_film not in films:
            bot.reply_to(message, "‚ö† –û–±–µ—Ä—ñ—Ç—å —Ñ—ñ–ª—å–º –∑—ñ —Å–ø–∏—Å–∫—É –Ω–∏–∂—á–µ.")
            return

        film_name = re.sub(r"^\d+\)\s*", "", selected_film)
        film_name = re.sub(r"\s*\(\d{4}\)", "", film_name).strip()

        print(f"[TMDb] –ü–æ—à—É–∫: {film_name}")

        search_response = requests.get(
            f"https://api.themoviedb.org/3/search/movie",
            params={"query": film_name, "api_key": TMDB_API_KEY, "language": "uk"},
            timeout=10
        ).json()

        if not search_response.get("results"):
            bot.reply_to(message, "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ü–µ–π —Ñ—ñ–ª—å–º.")
            return

        movie = search_response["results"][0]
        movie_id = movie["id"]

        details_response = requests.get(
            f"https://api.themoviedb.org/3/movie/{movie_id}",
            params={"api_key": TMDB_API_KEY, "language": "uk"},
            timeout=10
        ).json()

        title = details_response.get("title", "–ù–µ–≤—ñ–¥–æ–º–æ")
        year = details_response.get("release_date", "N/A")[:4]
        rating = details_response.get("vote_average", "N/A")
        overview = details_response.get("overview", "–û–ø–∏—Å –≤—ñ–¥—Å—É—Ç–Ω—ñ–π")
        genres = ", ".join([g["name"] for g in details_response.get("genres", [])])

        caption = (
            f"üé¨ <b>{title}</b> ({year})\n"
            f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: <b>{rating}/10</b>\n"
            f"üé≠ –ñ–∞–Ω—Ä: <b>{genres or '–ù–µ–≤—ñ–¥–æ–º–æ'}</b>\n"
            f"üìñ –°—é–∂–µ—Ç: <i>{overview}</i>"
        )

        poster_path = details_response.get("poster_path")
        if poster_path:
            poster_url = f"https://image.tmdb.org/t/p/w500{poster_path}"
            bot.send_photo(message.chat.id, poster_url, caption, parse_mode="HTML")
        else:
            bot.send_message(message.chat.id, caption, parse_mode="HTML")

    except Exception as e:
        print(f"[ERROR] show_film_details: {e}")
        bot.reply_to(message, f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: {str(e)}")

if __name__ == "__main__":
    print("Bot started")
    bot.polling()
