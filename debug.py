import os
import re
import requests
import sqlite3
import telebot
from telebot import types
from dotenv import load_dotenv
from g4f.client import Client
import threading
import time
import logging
import datetime

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot_logs.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
TMDB_API_KEY = os.getenv("TMDB_API_KEY")

bot = telebot.TeleBot(TELEGRAM_TOKEN)
client = Client()
user_data = {}

DB_FILE = "user_films.db"

def log_user_action(user_id: int, action: str, details: str = ""):
    """–õ–æ–≥—É–≤–∞–Ω–Ω—è –¥—ñ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    log_message = f"USER ACTION | UserID: {user_id} | Action: {action}"
    if details:
        log_message += f" | Details: {details}"
    logger.info(log_message)

def log_ai_request(user_id: int, prompt: str):
    """–õ–æ–≥—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—ñ–≤ –¥–æ –®–Ü"""
    logger.info(f"AI REQUEST | UserID: {user_id} | Prompt: {prompt[:200]}...")

def log_ai_response(user_id: int, response: str):
    """–õ–æ–≥—É–≤–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –≤—ñ–¥ –®–Ü"""
    logger.info(f"AI RESPONSE | UserID: {user_id} | Response: {response[:200]}...")

def log_error(user_id: int, error: str, context: str = ""):
    """–õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–º–∏–ª–æ–∫"""
    logger.error(f"ERROR | UserID: {user_id} | Error: {error} | Context: {context}")

def init_db():
    conn = sqlite3.connect(DB_FILE)
    c = conn.cursor()
    c.execute('''
    CREATE TABLE IF NOT EXISTS recommendations (
        user_id INTEGER,
        film TEXT,
        genre TEXT,
        preferences TEXT
    )
    ''')
    conn.commit()
    conn.close()
    logger.info("Database initialized")

def save_recommendation(user_id, film, genre, preferences):
    conn = sqlite3.connect(DB_FILE)
    c = conn.cursor()
    c.execute('INSERT INTO recommendations (user_id, film, genre, preferences) VALUES (?, ?, ?, ?)',
              (user_id, film, genre, preferences))
    conn.commit()
    conn.close()
    logger.info(f"Recommendation saved for user {user_id}: {film}")

def get_user_recommendations(user_id):
    conn = sqlite3.connect(DB_FILE)
    c = conn.cursor()
    c.execute('SELECT DISTINCT film FROM recommendations WHERE user_id = ?', (user_id,))
    films = [row[0] for row in c.fetchall()]
    conn.close()
    logger.info(f"Retrieved {len(films)} recommendations for user {user_id}")
    return films

def clear_user_recommendations(user_id):
    conn = sqlite3.connect(DB_FILE)
    c = conn.cursor()
    c.execute('DELETE FROM recommendations WHERE user_id = ?', (user_id,))
    conn.commit()
    conn.close()
    logger.info(f"Recommendations cleared for user {user_id}")

def cleanup_nodriver_file():
    try:
        nodriver_path = os.path.join("har_and_cookies", ".nodriver_is_open")
        if os.path.exists(nodriver_path):
            os.remove(nodriver_path)
            logger.info("Nodriver file deleted")
    except Exception as e:
        logger.error(f"Failed to delete nodriver file: {str(e)}")

def ask_ai(prompt: str, user_id: int) -> str:
    try:
        log_ai_request(user_id, prompt)
        response = client.chat.completions.create(
            messages=[{"role": "user", "content": prompt}],
            model="gpt-4",
            web_search=False
        )
        content = response.choices[0].message.content

        content = re.sub(r'https?://\S+|www\.\S+|\S+\.(com|org|net|ua|ru|info|tv|ly|to|gg|ai)\b', '', content, flags=re.IGNORECASE)
        content = re.sub(r'\[([^\]]+)\]\([^)]+\)', r'\1', content)
        content = content.replace("*", "").strip()

        log_ai_response(user_id, content)
        return content
    except Exception as e:
        logger.error(f"AI error for user {user_id}: {str(e)}")
        cleanup_nodriver_file()
        return None

def ask_ai_with_timeout(prompt: str, user_id: int, timeout: int = 30):
    result = {"response": None}

    def task():
        result["response"] = ask_ai(prompt, user_id)

    thread = threading.Thread(target=task)
    thread.start()
    thread.join(timeout)
    if thread.is_alive():
        logger.warning(f"AI request timeout for user {user_id}")
        cleanup_nodriver_file()
        return None
    return result["response"]

def get_retry_markup(is_history=False):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    if is_history:
        markup.add("üîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç–∏ –ø–æ—à—É–∫ —Å—Ö–æ–∂–∏—Ö", "‚¨ÖÔ∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")
    else:
        markup.add("üîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç–∏ –ø—ñ–¥–±—ñ—Ä", "‚¨ÖÔ∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")
    return markup

@bot.message_handler(func=lambda msg: msg.text == "üîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç–∏ –ø—ñ–¥–±—ñ—Ä")
def retry_recommendation(message):
    chat_id = message.chat.id
    log_user_action(chat_id, "Retry recommendation")
    generate_personal_recommendation(chat_id)

@bot.message_handler(func=lambda msg: msg.text == "üîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç–∏ –ø–æ—à—É–∫ —Å—Ö–æ–∂–∏—Ö")
def retry_history(message):
    chat_id = message.chat.id
    selected = user_data.get(chat_id, {}).get("last_selected_film")
    if not selected:
        bot.send_message(chat_id, "‚ö†Ô∏è –ù–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–æ–≥–æ —Ñ—ñ–ª—å–º—É –¥–ª—è –ø–æ–≤—Ç–æ—Ä—É.")
        return
    log_user_action(chat_id, "Retry similar search", f"Film: {selected}")
    handle_similar_search(chat_id, selected)

def handle_similar_search(chat_id, selected):
    user_data[chat_id]["last_selected_film"] = selected

    prompt = (
        f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –±–∞—á–∏–≤ —Ñ—ñ–ª—å–º '{selected}' —ñ —Ö–æ—á–µ —â–æ—Å—å —Å—Ö–æ–∂–µ —É —Ü—å–æ–º—É –∂ –∂–∞–Ω—Ä—ñ –∞–±–æ –Ω–∞—Å—Ç—Ä–æ—ó. "
        f"–ü–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É–π 5 —Å—Ö–æ–∂–∏—Ö —Ñ—ñ–ª—å–º—ñ–≤. –§–æ—Ä–º–∞—Ç: 1) –ù–∞–∑–≤–∞ (—Ä—ñ–∫); 2) –ù–∞–∑–≤–∞ (—Ä—ñ–∫); ... –ë–µ–∑ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤."
    )

    searching_msg = bot.send_message(chat_id, "üîç –®—É–∫–∞—é —Å—Ö–æ–∂—ñ —Ñ—ñ–ª—å–º–∏...", reply_markup=types.ReplyKeyboardRemove())
    
    start_time = time.time()
    gpt_response = ask_ai_with_timeout(prompt, chat_id)
    elapsed_time = time.time() - start_time

    try:
        bot.delete_message(chat_id, searching_msg.message_id)
    except Exception as e:
        logger.error(f"Failed to delete message for user {chat_id}: {str(e)}")

    if not gpt_response:
        bot.send_message(chat_id, "‚ö† –ß–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤–∏—á–µ—Ä–ø–∞–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:", reply_markup=get_retry_markup(is_history=True))
        return

    films = [line.strip().replace("*", "") for line in gpt_response.split('\n') if line.strip()][:5]
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for film in films:
        markup.add(film)
    markup.add("‚¨ÖÔ∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")

    bot.send_message(chat_id, "\n".join(films), reply_markup=markup)
    user_data[chat_id]['recommendations'] = films
    user_data[chat_id]['step'] = 'done'
    logger.info(f"Similar films found for user {chat_id}: {films}")

@bot.message_handler(func=lambda msg: user_data.get(msg.chat.id, {}).get('step') == 'similar' and msg.text != "üóë –û—á–∏—Å—Ç–∏—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é")
def handle_similar_film(message):
    chat_id = message.chat.id
    selected = message.text.strip()
    log_user_action(chat_id, "Selected film from history", selected)

    if selected == "‚¨ÖÔ∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é":
        send_welcome(message)
        return

    handle_similar_search(chat_id, selected)

@bot.message_handler(func=lambda msg: msg.text == "üóë –û—á–∏—Å—Ç–∏—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é")
def clear_history(message):
    chat_id = message.chat.id
    log_user_action(chat_id, "Clear history")
    clear_user_recommendations(chat_id)
    bot.send_message(chat_id, "‚úÖ –Ü—Å—Ç–æ—Ä—ñ—é –æ—á–∏—â–µ–Ω–æ. –ù–∞—Ç–∏—Å–Ω–∏ ‚¨ÖÔ∏è —â–æ–± –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å.")
    user_data[chat_id]['step'] = 'history_cleared'

def generate_personal_recommendation(chat_id):
    data = user_data[chat_id]
    genre = data['genre']
    favorites = ", ".join(data['favorites'])
    preferences = data['preferences']
    log_user_action(chat_id, "Generate recommendation", f"Genre: {genre}, Favorites: {favorites}, Preferences: {preferences}")

    prompt = (
        f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –ª—é–±–∏—Ç—å —Ñ—ñ–ª—å–º–∏: {favorites or '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ'}. "
        f"–ô–æ–≥–æ –±–∞–∂–∞–Ω–∏–π –∂–∞–Ω—Ä ‚Äî {genre or '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ'}. –í—ñ–Ω —Ö–æ—á–µ, —â–æ–± —É —Ñ—ñ–ª—å–º–∞—Ö –±—É–ª–æ: {preferences or '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ'}. "
        f"–ù–∞–∑–≤–∏ 5 —Ñ—ñ–ª—å–º—ñ–≤ —É –∂–∞–Ω—Ä—ñ {genre or '–±—É–¥—å-—è–∫–æ–º—É'} –∑ –µ–ª–µ–º–µ–Ω—Ç–∞–º–∏ {preferences or '–±—É–¥—å-—è–∫–∏–º–∏'}, —è–∫—ñ —Å—Ö–æ–∂—ñ –Ω–∞ –ø–µ—Ä–µ–ª—ñ—á–µ–Ω—ñ –≤–∏—â–µ. "
        f"–§–æ—Ä–º–∞—Ç: 1) –ù–∞–∑–≤–∞ (—Ä—ñ–∫); 2) –ù–∞–∑–≤–∞ (—Ä—ñ–∫); ... –ë–µ–∑ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤."
    )

    searching_msg = bot.send_message(chat_id, "‚è≥ –®—É–∫–∞—é –Ω–∞–π–∫—Ä–∞—â—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –¥–ª—è –≤–∞—Å...", reply_markup=types.ReplyKeyboardRemove())
    
    start_time = time.time()
    gpt_response = ask_ai_with_timeout(prompt, chat_id)
    elapsed_time = time.time() - start_time

    try:
        bot.delete_message(chat_id, searching_msg.message_id)
    except Exception as e:
        logger.error(f"Failed to delete message for user {chat_id}: {str(e)}")

    if not gpt_response:
        bot.send_message(chat_id, "‚ö† –ß–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤–∏—á–µ—Ä–ø–∞–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:", reply_markup=get_retry_markup(is_history=False))
        return

    films = [line.strip().replace("*", "") for line in gpt_response.split('\n') if re.match(r"^\d+\)", line.strip())][:5]
    user_data[chat_id]['recommendations'] = films

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for film in films:
        clean_film = re.sub(r"^\d+\)\s*", "", film)
        markup.add(clean_film)
        save_recommendation(chat_id, clean_film, genre, preferences)

    markup.add("‚¨ÖÔ∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")

    bot.send_message(
        chat_id,
        "üìΩ –û—Å—å –º–æ—ó —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è —Ç–µ–±–µ:\n" + "\n".join(films) + "\n\n–ú–æ–∂–µ—à –æ–±—Ä–∞—Ç–∏ —Ñ—ñ–ª—å–º, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –±—ñ–ª—å—à–µ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó:",
        reply_markup=markup
    )
    logger.info(f"Recommendations generated for user {chat_id}: {films}")

def get_continue_markup():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏", "‚¨ÖÔ∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")
    return markup

def is_valid_input(text):
    return bool(re.match(r"^[a-zA-Z–∞-—è–ê-–Ø—ñ–Ü—ó–á—î–Ñ“ë“ê\s,]+$", text.strip()))

@bot.message_handler(commands=['start'])
def send_welcome(message):
    chat_id = message.chat.id
    user_data[chat_id] = {
        'step': None,
        'genre': '',
        'favorites': [],
        'preferences': ''
    }
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üîç –ù–æ–≤–∏–π –ø—ñ–¥–±—ñ—Ä —Ñ—ñ–ª—å–º—ñ–≤", "üìú –Ü—Å—Ç–æ—Ä—ñ—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π")

    intro_text = (
        "üëã –ü—Ä–∏–≤—ñ—Ç! –Ø - –±–æ—Ç —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º —à—Ç—É—á–Ω–æ–≥–æ —ñ–Ω—Ç–µ–ª–µ–∫—Ç—É –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó —Ñ—ñ–ª—å–º—ñ–≤.\n\n"
        "üéØ –Ø –¥–æ–ø–æ–º–æ–∂—É —Ç–æ–±—ñ –∑–Ω–∞–π—Ç–∏ —Ü—ñ–∫–∞–≤—ñ —Ñ—ñ–ª—å–º–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ:\n"
        "‚Ä¢ –∂–∞–Ω—Ä—É üé≠\n"
        "‚Ä¢ —É–ª—é–±–ª–µ–Ω–∏—Ö —Ñ—ñ–ª—å–º—ñ–≤ üéû\n"
        "‚Ä¢ –æ—Å–æ–±–∏—Å—Ç–∏—Ö –ø–æ–±–∞–∂–∞–Ω—å ‚ú®\n\n"
        "üìå –¢–∏ –º–æ–∂–µ—à:\n"
        "1Ô∏è‚É£ –ü–æ—á–∞—Ç–∏ –Ω–æ–≤–∏–π –ø—ñ–¥–±—ñ—Ä —Ñ—ñ–ª—å–º—ñ–≤ ‚Äî –Ω–∞—Ç–∏—Å–Ω–∏ ¬´üîç –ù–æ–≤–∏–π –ø—ñ–¥–±—ñ—Ä —Ñ—ñ–ª—å–º—ñ–≤¬ª\n"
        "2Ô∏è‚É£ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é —Å–≤–æ—ó—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π ‚Äî ¬´üìú –Ü—Å—Ç–æ—Ä—ñ—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π¬ª, —â–æ–± –∑–Ω–∞–π—Ç–∏ *—Å—Ö–æ–∂—ñ —Ñ—ñ–ª—å–º–∏* –Ω–∞ —Ç—ñ, —â–æ —Ç–æ–±—ñ –≤–∂–µ —Å–ø–æ–¥–æ–±–∞–ª–∏—Å—å\n\n"
        "–û–±–µ—Ä–∏ –¥—ñ—é –Ω–∏–∂—á–µ:"
    )

    bot.send_message(chat_id, intro_text, reply_markup=markup, parse_mode="Markdown")
    log_user_action(chat_id, "Start command")

@bot.message_handler(func=lambda msg: msg.text == "üìú –Ü—Å—Ç–æ—Ä—ñ—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π")
def show_previous_films(message):
    chat_id = message.chat.id
    films = get_user_recommendations(chat_id)
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("‚¨ÖÔ∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")

    if not films:
        bot.send_message(chat_id, "üòî –£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π.", reply_markup=markup)
        log_user_action(chat_id, "Show history", "No recommendations")
        return

    for film in films:
        markup.add(film)

    markup.add("üóë –û—á–∏—Å—Ç–∏—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é")
    bot.send_message(
        chat_id,
        "üîÅ –û–±–µ—Ä–∏ —Ñ—ñ–ª—å–º –∑—ñ —Å–ø–∏—Å–∫—É –Ω–∏–∂—á–µ, —â–æ–± —è –∑–Ω–∞–π—à–æ–≤ *—Å—Ö–æ–∂—ñ —Ñ—ñ–ª—å–º–∏* –Ω–∞ –Ω—å–æ–≥–æ. –¢–∞–∫–æ–∂ –º–æ–∂–Ω–∞ –æ—á–∏—Å—Ç–∏—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ.",
        reply_markup=markup,
        parse_mode="Markdown"
    )
    user_data[chat_id] = {'step': 'similar', 'last_action': 'show_history'}
    log_user_action(chat_id, "Show history", f"{len(films)} recommendations")

@bot.message_handler(func=lambda msg: msg.text == "‚¨ÖÔ∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")
def back_to_menu(message):
    chat_id = message.chat.id
    log_user_action(chat_id, "Back to main menu")
    send_welcome(message)

@bot.message_handler(func=lambda msg: msg.text == "üîç –ù–æ–≤–∏–π –ø—ñ–¥–±—ñ—Ä —Ñ—ñ–ª—å–º—ñ–≤")
def start_new_recommendation(message):
    chat_id = message.chat.id
    user_data[chat_id] = {
        'step': 'genre',
        'genre': '',
        'favorites': [],
        'preferences': ''
    }
    bot.send_message(chat_id, "üé≠ –ù–∞–ø–∏—à–∏ –±–∞–∂–∞–Ω–∏–π –∂–∞–Ω—Ä –∞–±–æ –Ω–∞—Ç–∏—Å–Ω–∏ ‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏:", reply_markup=get_continue_markup())
    log_user_action(chat_id, "Start new recommendation")

@bot.message_handler(func=lambda msg: user_data.get(msg.chat.id, {}).get('step') == 'genre')
def handle_genre(message):
    chat_id = message.chat.id
    if message.text == "‚¨ÖÔ∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é":
        send_welcome(message)
        return

    if message.text != "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏":
        if not is_valid_input(message.text):
            bot.send_message(chat_id, "‚ö†Ô∏è –ñ–∞–Ω—Ä –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ –ª–∏—à–µ –ª—ñ—Ç–µ—Ä–∏ —Ç–∞ –ø—Ä–æ–±—ñ–ª–∏. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.")
            log_user_action(chat_id, "Invalid genre input", message.text)
            return
        genre = message.text.strip()
        log_user_action(chat_id, "Genre selected", genre)
    else:
        genre = ""
        log_user_action(chat_id, "Genre skipped")

    user_data[chat_id]['genre'] = genre
    user_data[chat_id]['step'] = 'favorites'
    bot.send_message(chat_id, "üéû –ù–∞–ø–∏—à–∏ —É–ª—é–±–ª–µ–Ω—ñ —Ñ—ñ–ª—å–º–∏ (—á–µ—Ä–µ–∑ –∫–æ–º—É) –∞–±–æ –Ω–∞—Ç–∏—Å–Ω–∏ ‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏:", reply_markup=get_continue_markup())

@bot.message_handler(func=lambda msg: user_data.get(msg.chat.id, {}).get('step') == 'favorites')
def handle_favorites(message):
    chat_id = message.chat.id
    if message.text == "‚¨ÖÔ∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é":
        send_welcome(message)
        return

    if message.text != "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏":
        favorites_raw = [f.strip() for f in message.text.split(',') if f.strip()]
        invalid = [f for f in favorites_raw if not is_valid_input(f)]
        if invalid:
            bot.send_message(chat_id, f"‚ö†Ô∏è –¶—ñ –Ω–∞–∑–≤–∏ –º—ñ—Å—Ç—è—Ç—å –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ñ —Å–∏–º–≤–æ–ª–∏: {', '.join(invalid)}. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.")
            log_user_action(chat_id, "Invalid favorites input", message.text)
            return
        favorites = favorites_raw
        log_user_action(chat_id, "Favorites selected", ", ".join(favorites))
    else:
        favorites = []
        log_user_action(chat_id, "Favorites skipped")

    user_data[chat_id]['favorites'] = favorites
    user_data[chat_id]['step'] = 'preferences'
    bot.send_message(chat_id, "‚ú® –©–æ —Ö–æ—á–µ—à –±–∞—á–∏—Ç–∏ —É —Ñ—ñ–ª—å–º—ñ? (–∞–±–æ –Ω–∞—Ç–∏—Å–Ω–∏ ‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏):", reply_markup=get_continue_markup())

@bot.message_handler(func=lambda msg: user_data.get(msg.chat.id, {}).get('step') == 'preferences')
def handle_preferences(message):
    chat_id = message.chat.id
    if message.text == "‚¨ÖÔ∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é":
        send_welcome(message)
        return

    if message.text != "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏":
        if not is_valid_input(message.text):
            bot.send_message(chat_id, "‚ö†Ô∏è –ü–æ–±–∞–∂–∞–Ω–Ω—è –º–æ–∂—É—Ç—å –º—ñ—Å—Ç–∏—Ç–∏ –ª–∏—à–µ –ª—ñ—Ç–µ—Ä–∏, –ø—Ä–æ–±—ñ–ª–∏ —Ç–∞ –∫–æ–º—É. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.")
            log_user_action(chat_id, "Invalid preferences input", message.text)
            return
        prefs = message.text.strip()
        log_user_action(chat_id, "Preferences selected", prefs)
    else:
        prefs = ""
        log_user_action(chat_id, "Preferences skipped")

    genre = user_data[chat_id].get('genre', '').strip()
    favorites = user_data[chat_id].get('favorites', [])

    if not genre and not favorites and not prefs:
        bot.send_message(chat_id, "‚ö†Ô∏è –ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ —Ö–æ—á–∞ –± –æ–¥–∏–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä: –∂–∞–Ω—Ä, —É–ª—é–±–ª–µ–Ω—ñ —Ñ—ñ–ª—å–º–∏ –∞–±–æ –ø–æ–±–∞–∂–∞–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.")
        user_data[chat_id]['step'] = 'genre'
        bot.send_message(chat_id, "üé≠ –ù–∞–ø–∏—à–∏ –±–∞–∂–∞–Ω–∏–π –∂–∞–Ω—Ä (–∞–±–æ –Ω–∞—Ç–∏—Å–Ω–∏ ‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏):", reply_markup=get_continue_markup())
        log_user_action(chat_id, "No parameters provided")
        return

    user_data[chat_id]['preferences'] = prefs
    user_data[chat_id]['step'] = 'done'
    generate_personal_recommendation(chat_id)

@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get('recommendations'))
def show_film_details(message):
    try:
        chat_id = message.chat.id
        selected_film = message.text.strip()
        log_user_action(chat_id, "Film details requested", selected_film)

        film_name = selected_film
        film_name = re.sub(r"^\d+\)\s*", "", film_name)
        film_name = re.sub(r"\s*\(\d{4}\)", "", film_name)
        film_name = film_name.strip()

        search_response = requests.get(
            f"https://api.themoviedb.org/3/search/movie",
            params={"query": film_name, "api_key": TMDB_API_KEY, "language": "uk"},
            timeout=10
        ).json()

        if not search_response.get("results"):
            bot.send_message(chat_id, f"üòî –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ñ—ñ–ª—å–º: {film_name}")
            log_user_action(chat_id, "Film not found", film_name)
            return

        movie = search_response["results"][0]
        movie_id = movie["id"]

        details_response = requests.get(
            f"https://api.themoviedb.org/3/movie/{movie_id}",
            params={"api_key": TMDB_API_KEY, "language": "uk"},
            timeout=10
        ).json()

        title = details_response.get("title", "–ù–µ–≤—ñ–¥–æ–º–æ")
        year = details_response.get("release_date", "N/A")[:4]
        rating = details_response.get("vote_average", "N/A")
        overview = details_response.get("overview", "–û–ø–∏—Å –≤—ñ–¥—Å—É—Ç–Ω—ñ–π")
        genres = ", ".join([g["name"] for g in details_response.get("genres", [])])

        caption = (
            f"üé¨ <b>{title}</b> ({year})\n"
            f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: <b>{rating}/10</b>\n"
            f"üé≠ –ñ–∞–Ω—Ä: <b>{genres or '–ù–µ–≤—ñ–¥–æ–º–æ'}</b>\n"
            f"üìñ –°—é–∂–µ—Ç: <i>{overview}</i>"
        )

        poster_path = details_response.get("poster_path")
        if poster_path:
            poster_url = f"https://image.tmdb.org/t/p/w500{poster_path}"
            bot.send_photo(chat_id, poster_url, caption, parse_mode="HTML")
            logger.info(f"Film details sent with poster for user {chat_id}: {title}")
        else:
            bot.send_message(chat_id, caption, parse_mode="HTML")
            logger.info(f"Film details sent without poster for user {chat_id}: {title}")

    except Exception as e:
        logger.error(f"Error showing film details for user {chat_id}: {str(e)}")
        bot.send_message(chat_id, f"‚ö† –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: {str(e)}")

if __name__ == "__main__":
    init_db()
    logger.info("Bot started")
    bot.polling()